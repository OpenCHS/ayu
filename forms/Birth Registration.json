{
  "name": "Birth Registration",
  "uuid": "ab962435-8c21-4ecb-9785-d1f0f8cd32cc",
  "formType": "ProgramEncounter",
  "formElementGroups": [
    {
      "uuid": "50d1f583-efdf-4f7a-9b86-85fbaa83dd98",
      "name": "Basic Details",
      "displayOrder": 1.0,
      "display": "Basic Details",
      "formElements": [
        {
          "name": "Is child getting registered at Birth",
          "uuid": "5ffb2b7b-f9af-4a50-ae1e-a8f07cdba62e",
          "keyValues": [
            {
              "key": "ExcludedAnswers",
              "value": []
            }
          ],
          "concept": {
            "uuid": "01cf3817-37d8-4e7e-a116-c4c4a389994e"
          },
          "displayOrder": 1.0,
          "type": "SingleSelect",
          "mandatory": true
        },
        {
          "name": "Current Weight",
          "uuid": "6bcae9f3-b733-4e37-a752-6812146d1e4f",
          "keyValues": [],
          "concept": {
            "uuid": "47f60bfb-af4a-4612-a7f7-6b94165121b4"
          },
          "displayOrder": 2.0,
          "type": "SingleSelect",
          "rule": "'use strict'; \n            function rule({params, imports}) {\n                const programEnrolment = params.entity;\n                const formElement = params.formElement;\n                const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n                statusBuilder.show().when.valueInEnrolment('Is child getting registered at Birth').containsAnswerConceptName(\"No\");\n                return statusBuilder.build();\n            };\n            rule;",
          "mandatory": false
        },
        {
          "name": "Birth Weight",
          "uuid": "02643d9b-92e0-4746-aa53-0efd7bd60048",
          "keyValues": [],
          "concept": {
            "uuid": "a0a128ae-62c3-4814-8a2f-510ef1857c4f"
          },
          "displayOrder": 3.0,
          "type": "SingleSelect",
          "rule": "'use strict'; \n            function rule({params, imports}) {\n                const programEnrolment = params.entity;\n                const formElement = params.formElement;\n                const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n                statusBuilder.show().when.valueInEnrolment('Is child getting registered at Birth').containsAnswerConceptName(\"Yes\");\n                return statusBuilder.build();\n            };\n            rule;",
          "mandatory": false
        },
        {
          "name": "date",
          "uuid": "38319e2c-3be0-4141-a4f1-cfb24112ceda",
          "keyValues": [
            {
              "key": "datePickerMode",
              "value": "Calender"
            }
          ],
          "concept": {
            "uuid": "dcfee463-55c2-4bd2-a098-7522772d34ee"
          },
          "displayOrder": 4.0,
          "type": "SingleSelect",
          "mandatory": false
        }
      ]
    }
  ],
  "decisionRule": "\"use strict\";\n({ params, imports }) => {\n  const programEncounter = params.entity;\n  const decisions = params.decisions;\n  const complicationsBuilder = new imports.rulesConfig.complicationsBuilder({\n    programEncounter: programEncounter,\n    complicationsConcept: \"Birth status\"\n  });\n  complicationsBuilder\n    .addComplication(\"Baby is over weight\")\n    .when.valueInEncounter(\"Birth Weight\")\n    .is.greaterThanOrEqualTo(8);\n  complicationsBuilder\n    .addComplication(\"Baby is under weight\")\n    .when.valueInEncounter(\"Birth Weight\")\n    .is.lessThanOrEqualTo(5);\n  complicationsBuilder\n    .addComplication(\"Baby is normal\")\n    .when.valueInEncounter(\"Birth Weight\")\n    .is.lessThan(8)\n    .and.when.valueInEncounter(\"Birth Weight\")\n    .is.greaterThan(5);\n  decisions.encounterDecisions.push(complicationsBuilder.getComplications());\n  return decisions;\n};\n",
  "visitScheduleRule": "",
  "validationRule": "(\"use strict\");\n({ params, imports }) => {\n   const programEncounter = params.entity;\n   const validationResults = [];\n   const currentWeight = programEncounter.getObservationReadableValue(\"Current Weight\");\n   if (currentWeight && currentWeight.toString().length > 2) {\n       validationResults.push(imports.common.createValidationError(\"CurrentWeightMoreThanTwoDigitNotAllowed\"));\n   }\n   return validationResults;\n};"
}